x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider distributions you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  # image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:3.0.1}
  # build: .
  build:
    context: .
    dockerfile: Dockerfile.airflow
  environment:
    &airflow-common-env
    AZURE_CONNECTION_STRING: "${AZURE_CONNECTION_STRING}"
    AIRFLOW__CELERY__WORKER_LOG_SERVER_PORT: 8793
    AIRFLOW__CELERY__WORKER_LOG_SERVER_HOST: "airflow-worker"
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    SPARK_HOME: /opt/bitnami/spark
    JAVA_HOME: /opt/bitnami/java
    # PATH: $PATH:/spark-shared/bin
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API_AUTH__JWT_SECRET: "SebOtto"
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  volumes:
    - spark-install:/spark-shared
    - spark-binaries:/opt/bitnami/spark
    - java-binaries:/opt/bitnami/java
    - ./schemas:/opt/airflow/schemas
    - ./dags:/opt/airflow/dags
    - ./output:/opt/airflow/logs
    - ./config:/opt/airflow/config
    - ./plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - bdm_net

  redis:
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - bdm_net

  

  airflow-apiserver:
    <<: *airflow-common
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    environment:
      <<: *airflow-common-env
      SPARK_MASTER_URL: spark://spark-master:7077
      HDFS_URL: http://namenode:9870
    networks:
      - bdm_net


  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - bdm_net

  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - bdm_net

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-apiserver:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - bdm_net

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - bdm_net

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
          export AIRFLOW_UID=$(id -u)
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        echo
        echo "Creating missing opt dirs if missing:"
        echo
        mkdir -v -p /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Airflow version:"
        /entrypoint airflow version
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Running airflow config list to create default config file if missing."
        echo
        /entrypoint airflow config list >/dev/null
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Change ownership of files in /opt/airflow to ${AIRFLOW_UID}:0"
        echo
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
        echo
        echo "Change ownership of files in shared volumes to ${AIRFLOW_UID}:0"
        echo
        chown -v -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}

    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    # user: "0:0"
    user: "${AIRFLOW_UID:-50000}:0"
    networks:
      - bdm_net

  airflow-cli:
    <<: *airflow-common
    # image: apache/airflow:2.8.1
    profiles:
      - debug
    command: >
      bash -c "
        airflow connections delete spark_standalone_client || true;
        airflow connections add 'spark_standalone_client' \
          --conn-json '{
              \"conn_type\": \"spark\",
              \"host\": \"spark://spark-master\",
              \"port\": 7077
          }'
      "
    depends_on:
      <<: *airflow-common-depends-on
    networks:
      - bdm_net

  spark-master:
    image: spark-custom:latest
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-master
    hostname: spark-master
    volumes:
      - spark-output-test:/opt/bitnami/spark/output
      - ./dags:/opt/airflow/dags               
      - ./jars:/spark-shared/jars          
      - spark-install:/spark-shared
      - spark-binaries:/opt/bitnami/spark
      - java-binaries:/opt/bitnami/java
      - ./schemas:/opt/airflow/schemas
      - ./trustedzone:/opt/bitnami/spark/trustedzone/francetrust
      - ./trustedzone:/opt/bitnami/spark/trustedzone/itatrust
    
    command: >
      bash -c "pip install --no-cache-dir pyarrow && exec /opt/bitnami/spark/bin/spark-class org.apache.spark.deploy.master.Master --host spark-master"

    environment:
      SPARK_NO_DAEMONIZE: "true"
      SPARK_MASTER_PORT: "7077"
    ports:
      - "7077:7077"
      - "8081:8080"
    networks:
      - bdm_net

  spark-worker-1:
    image: spark-custom:latest
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-worker-1
    hostname: spark-worker-1
    volumes:
      - spark-output-test:/opt/bitnami/spark/output
      - ./dags:/opt/airflow/dags               
      - ./jars:/spark-shared/jars          
      - spark-install:/spark-shared
      - spark-binaries:/opt/bitnami/spark
      - java-binaries:/opt/bitnami/java
      - ./schemas:/opt/airflow/schemas
      - ./trustedzone:/opt/bitnami/spark/trustedzone/francetrust
      - ./trustedzone:/opt/bitnami/spark/trustedzone/itatrust
    depends_on:
      - spark-master
   
    command: >
      bash -c "pip install --no-cache-dir pyarrow && exec /opt/bitnami/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077"


    networks:
      - bdm_net
    
  spark-worker-2:
    image: spark-custom:latest
    build:
      context: .
      dockerfile: Dockerfile.spark
    container_name: spark-worker-2         
    hostname: spark-worker-2               
    volumes:
      - spark-output-test:/opt/bitnami/spark/output
      - ./dags:/opt/airflow/dags               
      - ./jars:/spark-shared/jars          
      - spark-install:/spark-shared
      - spark-binaries:/opt/bitnami/spark
      - java-binaries:/opt/bitnami/java
      - ./schemas:/opt/airflow/schemas
      - ./trustedzone:/opt/bitnami/spark/trustedzone/francetrust
      - ./trustedzone:/opt/bitnami/spark/trustedzone/itatrust
    depends_on:
      - spark-master
    command: >
      bash -c "pip install --no-cache-dir pyarrow && exec /opt/bitnami/spark/bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077"
    networks:
      - bdm_net
  
  postgres-db:
      image: postgis/postgis:13-3.4
      restart: always
      volumes:
        - pg-db:/var/lib/postgresql/data 
      networks:
        - bdm_net
      environment:
        - POSTGRES_USER="your_user_name"
        - POSTGRES_PASSWORD="your_user_pwrd"
        - POSTGRES_DB="your_user_db"
      ports:
        - "5430:5432"
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.0
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - bdm_net
  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2020-12-03T00-03-10Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - bdm_net

  standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.0.2
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    ports:
      - "19530:19530"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - bdm_net
volumes:
  spark-install:
  postgres-db-volume:
  spark-output-test:
  pg-db:
  java-binaries:
  spark-binaries:

networks:
  bdm_net:
    external: true
